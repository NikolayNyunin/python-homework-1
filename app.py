from api import get_current_temperature
from stats import calculate_rolling_average, calculate_stats, detect_anomalies, get_current_season

import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt

import asyncio


async def main() -> None:
    """–¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ Streamlit-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è."""

    st.set_page_config(
        page_title='–ê–Ω–∞–ª–∏–∑ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã',
        page_icon='üå°Ô∏è',
        layout='wide'
    )

    # –ó–∞–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö —Å—Ç–∏–ª–µ–π
    style = """
    <style>
        div {text-align: center;}
    </style>
    """
    st.markdown(style, unsafe_allow_html=True)

    st.title('–î–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ ‚Ññ1 (Applied Python)')
    st.write('## –ê–Ω–∞–ª–∏–∑ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ç–µ–∫—É—â–µ–π —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã —á–µ—Ä–µ–∑ OpenWeatherMap API')
    st.divider()

    col1, col2, col3 = st.columns(3)

    with col1:
        data_file = st.file_uploader('–§–∞–π–ª —Å –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏:', 'csv')
        if data_file is not None:
            data = pd.read_csv(data_file)
            cities = sorted(data['city'].unique())
            with col2:
                city = st.selectbox('–ì–æ—Ä–æ–¥ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:', cities, None)
        else:
            data = None
            with col2:
                city = st.selectbox('–ì–æ—Ä–æ–¥ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:', None, None)

    with col3:
        api_key = st.text_input('–ö–ª—é—á –¥–ª—è OpenWeatherMap API:', None)

    analyze_button = st.button('–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É')
    st.divider()
    if analyze_button:
        await analyze_temperature(data, city, api_key)


async def analyze_temperature(data: pd.DataFrame, city: str, api_key: str) -> None:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏ –∞–Ω–∞–ª–∏–∑ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã –≤ –≥–æ—Ä–æ–¥–µ `city`."""

    if data is None:
        st.error('–§–∞–π–ª —Å –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –Ω–µ –≤—ã–±—Ä–∞–Ω')
        return
    elif city is None:
        st.error('–ì–æ—Ä–æ–¥ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –Ω–µ –≤—ã–±—Ä–∞–Ω')
        return
    elif api_key is None:
        st.error('–ö–ª—é—á –¥–ª—è API –Ω–µ –≤–≤–µ–¥—ë–Ω')
        return

    status_code, temperature = await get_current_temperature(city, api_key)
    if status_code != 0:
        st.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–π —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã')
        return

    city_data = data[data['city'] == city]
    city_data['timestamp'] = pd.to_datetime(city_data['timestamp'])
    city_data['avg_temperature'] = calculate_rolling_average(city_data)
    city_stats = calculate_stats(city_data)
    city_data['is_anomaly'] = detect_anomalies(city_data, city_stats)

    st.write(f'## –¢–µ–∫—É—â–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: ${temperature}¬∞C$')
    current_season = get_current_season()
    mean, std = city_stats[current_season]['mean'], city_stats[current_season]['std']
    min_temp, max_temp = mean - 2 * std, mean + 2 * std
    if min_temp <= temperature <= max_temp:
        st.write(f'### :green-background[–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –Ω–æ—Ä–º–∞–ª—å–Ω–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ ({min_temp:.2f} ... {max_temp:.2f})]')
    else:
        st.write(f'### :red-background[–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –∑–∞ –ø—Ä–µ–¥–µ–ª–∞–º–∏ –Ω–æ—Ä–º–∞–ª—å–Ω–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ ({min_temp:.2f} ... {max_temp:.2f})]')

    st.write('## –ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ:')

    st.write('### –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ —Å–µ–∑–æ–Ω–∞–º:')
    city_stats_data = pd.DataFrame(city_stats)
    st.columns(3)[1].table(city_stats_data)

    st.write('### –ì—Ä–∞—Ñ–∏–∫ –∏—Å—Ç–æ—Ä–∏–∏ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä:')
    not_anomalies = city_data[city_data['is_anomaly'] == False]
    anomalies = city_data[city_data['is_anomaly'] == True]
    fig, ax = plt.subplots(figsize=(12, 3))
    ax.scatter(not_anomalies['timestamp'], not_anomalies['temperature'], s=5, c='blue')
    ax.scatter(anomalies['timestamp'], anomalies['temperature'], s=5, c='red')
    ax.plot(city_data['timestamp'], city_data['avg_temperature'], c='lime', linewidth=2)
    st.pyplot(fig)
    st.write('(:blue[—Å–∏–Ω–∏–π] - –Ω–æ—Ä–º–∞–ª—å–Ω—ã–µ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã, :red[–∫—Ä–∞—Å–Ω—ã–π] - –∞–Ω–æ–º–∞–ª–∏–∏, :green[–∑–µ–ª—ë–Ω—ã–π] - —Å–∫–æ–ª—å–∑—è—â–µ–µ —Å—Ä–µ–¥–Ω–µ–µ)')


if __name__ == '__main__':
    asyncio.run(main())
